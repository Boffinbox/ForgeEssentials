# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Publish To Discord

on:
  workflow_run:
    workflows: [ "Java CI with Gradle" ]
    types:
      - completed
env:
  WORKFLOW_GITHUB_REF: ${{ github.event.workflow_run.head_repository.full_name }}/${{ github.event.workflow_run.head_branch }}
jobs:
  publish:

    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && !contains(github.event.workflow_run.head_commit.message, '[Skip Discord]') }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ForgeEssentials/DiscordGradleBot
          path: DiscordGradleBot
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        id: download-artifact
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("binaries")
            });
            
            if (matchArtifacts.length >= 1) {
              var matchArtifact = matchArtifacts[0];
            
              var download = await github.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: matchArtifact.id,
                 archive_format: 'zip',
              });
              var fs = require('fs');
              fs.writeFileSync('${{github.workspace}}/binaries.zip', Buffer.from(download.data));
              var artifactSplit = matchArtifact.name.split("-");
              version = artifactSplit[1];
              if ( version == 'UNOFFICIAL') {
                version += `-${artifactSplit[2]}`;
              } else if (version == '${{ github.event.workflow_run.head_sha }}') {
                version = `UNOFFICIAL-${version}`;
              }
              return version;
            } else {
              return '[Skip Discord]';
            }
          result-encoding: string
      - run: |
          mkdir -p build/libs
          unzip binaries.zip -d build/libs
        if: ${{ steps.download-artifact.outputs.result  != '[Skip Discord]' }}
      - name: Publish Binaries to Discord
        working-directory: DiscordGradleBot
        env:
          DISCORD_TOKEN: '${{ secrets.DISCORD_TOKEN }}'
          DEV_BUILD_CHANNEL_ID: '${{ vars.DEV_BUILD_CHANNEL_ID }}'
          RELEASE_CHANNEL_ID: '${{ vars.RELEASE_CHANNEL_ID }}'
          BUILD_NUMBER: '${{ steps.download-artifact.outputs.result }}'
        if: ${{ steps.download-artifact.outputs.result  != '[Skip Discord]' }}
        run: |
          chmod +x gradlew
          ./gradlew publishToDiscord -i
