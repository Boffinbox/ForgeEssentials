// Build repositories
buildscript {
	repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/releases/"
		}
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven/"
        }
		mavenCentral()
		mavenLocal()
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		jcenter()

	}
	dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
		classpath "org.ajoberstar:gradle-git:0.12.0"
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "$minecraftVersion-$mod_version"
group = "com.forgeessentialsclient"
archivesBaseName = "forgeessentialsclient"
sourceCompatibility = 1.8
targetCompatibility = 1.8
//java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.16.5'
    //accessTransformer = file('src/main/resources/META-INF/forgeessentials_at.cfg')
    runs {
        client {
            workingDirectory project.file('rundir')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forgeessentialsclient {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('rundir')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forgeessentialsclient {
                    source sourceSets.main
                }
            }
        }
    }
}
// Include resources generated by data generators.
// Configure server resource processing
//project.processResources {
//	from (sourceSets.main.resources.srcDirs) {
//		include 'META-INF/mods.toml'
//		expand (
//			'version': project.version,
//			'mod_name': mod_name_client, 
//			'mod_download': mod_download,
//		)
//	}
//}
//sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories.clear()
// Set up FE required repositories
repositories {
    flatDir {
        dirs 'lib'
    }
	maven {
		name = "sk89q"
		url = "https://maven.enginehub.org/repo/"
	}
	maven {
		name = "sponge"
		url = "https://repo.spongepowered.org/maven/"
	}

	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven/"
	}

    maven {
        name "Sonatype (Cubic Chunks)"
        url "https://oss.sonatype.org/content/repositories/public/"
    }

    maven {
        name = "LatMod"
        url "https://maven.latmod.com/"
    }

    maven {
        name 'JEI'
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup 'mezz.jei'
        }
    }

    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
}
/************************************************************
 * Dependency configuration
 */

// Create dependency configurations
configurations {
	includeMod
	shade
	shadeClient
	serverLib
	compile.extendsFrom shade, shadeClient, serverLib
    mavenDeps
}

// def jdkHome = System.getenv("JAVA_HOME")

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
    minecraft "net.minecraftforge:forge:$project.minecraftVersion-$project.forgeVersion"

    // Shade Mixin library
    shade (group: "org.spongepowered", name: "mixin", version: "0.8.5") {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
    }
    shadeClient (group: "org.spongepowered", name: "mixin", version: "0.8.5") {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
    }

	// Database libraries	
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


	//buildDep "org.spongepowered:spongeforge:3.1.0-BETA-1046:deobf"
	compileOnly 'org.spongepowered:spongeapi:9.0.0'

	// TOOLS.jar from jdk for javadoc support
    // compile files("$jdkHome/lib/tools.jar")
    compile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
}
//import org.apache.tools.ant.filters.ReplaceTokens
//project.compileUtilsJava {
//    doFirst {
//        copy {
//            from ('src/utils/replaceJava') {
//                filter(ReplaceTokens, tokens: ['_MCVERSION_':project.minecraftVersion, '_BASEVERSION_': project.mod_version])
//            }
//            into 'src/main/java'
//        }
//    }
//}
sourceSets {
    def deps = [
		configurations.minecraft,
        configurations.compileOnly.setCanBeResolved(true)
	]
	utils {
		compileClasspath = files(configurations.compile)
		compileClasspath += files deps
	}
	main {
		compileClasspath = files(configurations.compile, sourceSets.utils.output)
		compileClasspath += files deps
        refMap = "mixins.forgeessentials.client.refmap.json"
	}
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "forgeessentialsclient",
            "Specification-Vendor": "forgeessentialsclient",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"forgeessentialsclient",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
