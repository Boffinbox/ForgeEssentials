// Build repositories
buildscript {
	repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/releases/"
		}
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven/"
        }
		mavenCentral()
		mavenLocal()
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		jcenter()

	}
	dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
		classpath "org.ajoberstar:gradle-git:0.12.0"
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
    id 'org.spongepowered.plugin' version '0.6'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'jacoco'

sonarqube {
    properties {
        properties['sonar.projectKey'] = "com.forgeessentials:forgeessentials"
        properties['sonar.projectName'] = project.mod_name
        properties['sonar.projectVersion'] = project.mod_version
    }
}

//Clear repositories since spongepowered plugin is inserting an extra repo with http!
//TODO: Update to a newer version of the spongepowered plugin
repositories.clear()
// Set up FE required repositories
repositories {
    flatDir {
        dirs 'lib'
    }
	maven {
		name = "sk89q"
		url = "https://maven.enginehub.org/repo/"
	}
	maven {
		name = "sponge"
		url = "https://repo.spongepowered.org/maven/"
	}

	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven/"
	}

    maven {
        name "Sonatype (Cubic Chunks)"
        url "https://oss.sonatype.org/content/repositories/public/"
    }

    maven {
        name = "LatMod"
        url "https://maven.latmod.com/"
    }

    maven {
        name = "JEI"
        url "http://dvs1.progwml6.com/files/maven"
        allowInsecureProtocol = true
    }

    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

/************************************************************
 * General configuration
 */

// Get buildNumber from environment variable
ext.buildNumber = "0"
if (System.getenv("BUILD_NUMBER") != null) {
	buildNumber = System.getenv("BUILD_NUMBER")

}

// Get commit hash
import org.ajoberstar.grgit.Grgit
def repo = Grgit.open(project.file("."))
ext.gitCommitHash = repo.log().find().abbreviatedId

// Set build properties
version = "$mod_version.$buildNumber"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.8
targetCompatibility = 1.8
//java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Set up forge options
minecraft {
    mappings channel: 'official', version: '1.16.5'
    accessTransformer = file('src/main/resources/META-INF/forgeessentials_at.cfg')
    runs {
        client {
            workingDirectory project.file('rundir')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
            }
        }

        server {
            workingDirectory project.file('rundir')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
            }
        }
    }
}

// Configure shared manifest
ext.sharedManifest = manifest {
	attributes (
		"BuildID": gitCommitHash,
		"BuildNumber": buildNumber,
		"FMLCorePluginContainsFMLMod": "true",
		"ForceLoadAsMod": "true",
        "MixinCompatibilityLevel": "JAVA_8",
	)
}

ext.serverManifest = manifest {
	from sharedManifest
	attributes (
		"TweakClass": "com.forgeessentials.core.preloader.FELaunchHandler",
		"TweakOrder": "0",
		"MixinConfigs": "mixins.forgeessentials.json",
		"FMLAT": "forgeessentials_at.cfg",
	)
}

/************************************************************
 * Dependency configuration
 */

// Create dependency configurations
configurations {
	includeMod
	shade
	shadeClient
	serverLib
	compile.extendsFrom shade, shadeClient, serverLib
    mavenDeps
}

// def jdkHome = System.getenv("JAVA_HOME")

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {

    minecraft "net.minecraftforge:forge:$project.minecraftVersion-$project.forgeVersion"
	// IRC
	//serverLib("org.pircbotx:pircbotx:2.0.1") {
    //    // these are all packaged with the minecraft server jar
    //    exclude module: 'guava'
    //    exclude module: 'commons-lang3'
    //    exclude module: 'commons-codec'
    //}

    // Shade Mixin library
    shade (group: "org.spongepowered", name: "mixin", version: "0.8.1-SNAPSHOT") {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
    }
    shadeClient (group: "org.spongepowered", name: "mixin", version: "0.8.1-SNAPSHOT") {
        exclude group: 'org.ow2.asm', module: 'asm-tree'
    }

	// Database libraries	
	serverLib group: 'com.h2database', 	name: 'h2', 					version: '1.3.175'
	serverLib group: 'mysql', 			name: 'mysql-connector-java', 	version: '5.1.22'
	serverLib group: 'org.hibernate', 	name: 'hibernate-core', 		version: '5.2.2.Final'
    annotationProcessor group: 'org.hibernate', 	name: 'hibernate-jpamodelgen', 	version: '5.2.2.Final'
    annotationProcessor 'org.spongepowered:mixin:0.8.1-SNAPSHOT:processor'
	/* serverLib "org.eclipse.persistence:eclipselink:2.6.0" */
	
	// WorldEdit
    compile "com.sk89q.worldedit:worldedit-core:6.1.4-SNAPSHOT"
    compile "com.sk89q.worldedit:worldedit-forge-mc1.10.2:6.1.5"
    compile "baubles:Baubles:1.12:1.5.2"
    //deobfProvided files('lib/worldedit-forge-mc1.10.2-6.1.4-dist.jar')
    mavenDeps "com.sk89q.worldedit:worldedit-core:6.1.4-SNAPSHOT"

	//buildDep "org.spongepowered:spongeforge:3.1.0-BETA-1046:deobf"
	compileOnly 'org.spongepowered:spongeapi:6.0.0'
    compileOnly ("io.github.opencubicchunks:cubicchunks-api:1.12.2-0.0-SNAPSHOT") {
        exclude group: "org.spongepowered", module: "mixin"
    }
    compileOnly "com.feed_the_beast.mods:FTBLib:5.4.4.5"
    compileOnly "com.feed_the_beast.mods:FTBUtilities:5.4.0.124"

	// TOOLS.jar from jdk for javadoc support
    // compile files("$jdkHome/lib/tools.jar")
    compile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
}

/************************************************************
 * Configure source sets (e.g., src/main)
 */

sourceSets {
    def deps = [
		configurations.minecraft,
        configurations.compileOnly
	]
	utils {
		compileClasspath = files(configurations.compile)
		compileClasspath += files deps
	}
	main {
		compileClasspath = files(configurations.compile, sourceSets.utils.output)
		compileClasspath += files deps
        refMap = "mixins.forgeessentials.refmap.json"
	}
	client {
		compileClasspath = files(configurations.compile, sourceSets.utils.output)
		compileClasspath += files deps
        refMap = "mixins.forgeessentials.client.refmap.json"
	}

    test {
        compileClasspath = files(configurations.compile, sourceSets.utils.output, sourceSets.main.output)
        compileClasspath += files deps
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
project.compileUtilsJava {
    doFirst {
        copy {
            from ('src/utils/replaceJava') {
                filter(ReplaceTokens, tokens: ['_MCVERSION_':project.minecraftVersion, '_BASEVERSION_': project.baseVersion])
            }
            into 'src/utils/java'
        }
    }
}
// Configure server resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand (
			'version': project.version,
			'mod_name': mod_name, 
			'mod_download': mod_download,
		)
	}
}

// Configure client resource processing
project.processClientResources {
	from (sourceSets.client.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand (
			'version': project.version,
			'mod_name': mod_name, 
			'mod_download': mod_download,
		)
	}
}

/************************************************************
 * Configure server jar (default)
 */

 // JavaExec task for generating tsd
//  Calls the main class for the TSD generator since that is working

task tsd(type: JavaExec) {
    dependsOn "classes"
    classpath = project.sourceSets.test.compileClasspath
    main = "com.forgeessentials.jscripting.TsdGenerator"
    doLast {
        copy {
            from files("jscripting/") {
                include "*.d.ts"
            }
            into "build/resources/main/com/forgeessentials/jscripting"
        }
    }
}

// Pack libraries as zip file to include them in the jar file
task serverLibArchive(type: Zip) {
	archiveName = "libraries.zip"
	destinationDir = jar.destinationDir

	from (configurations.serverLib.copyRecursive()) { into("ForgeEssentials/lib") }
	from (configurations.includeMod) { into("mods") }
}

jar.doLast {
	delete (serverLibArchive.archivePath)
}

// Configure server jar (default)
jar {
	dependsOn "serverLibArchive"
    dependsOn "tsd"
	classifier = "server"
	appendix = project.minecraftVersion
	
	from sourceSets.main.output
	from sourceSets.utils.output
    exclude('com/forgeessentials/client/**')
    from fileTree(serverLibArchive.archivePath)
	configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))

        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.MF'
        exclude 'LICENSE.txt'
	}

	manifest {
		from serverManifest
	}
}

/************************************************************
 * Configure client jar
 */

task clientJar (dependsOn: "clientClasses", type: Jar) {
	classifier = "client"
	appendix = project.minecraftVersion
	
	from sourceSets.client.output
	from sourceSets.utils.output
	configurations.shadeClient.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))
	}
	
	manifest {
		from sharedManifest
		attributes (
			"MixinConfigs": "mixins.forgeessentials.client.json",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
		)
	}
}

/************************************************************
 * Deobfuscated server jar
 * Dependency name for maven = com.forgeessentials:forgeessentials:<version>:
 * */

task deobfJar(dependsOn: "classes", type: Jar) {
	classifier = "dev"
	appendix = project.minecraftVersion
	
	from sourceSets.main.output
	from sourceSets.utils.output
	
	from (sourceSets.main.java) {
		into ("src/")
	}

	manifest {
		from serverManifest
	}
}
//
//task sourceJar(type: Jar) {
//	classifier = "sources"
//	appendix = project.minecraftVersion
//
//	from sourceSets.main.allSource
//
//	manifest {
//		from serverManifest
//	}
//}


/************************************************************
 * Configure API javadoc
 */

javadoc {
	include "com/forgeessentials/api/**"
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output
	options.addBooleanOption("Xdoclint:reference,accessibility,html", true) // excluded: syntax, missing
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	appendix = project.minecraftVersion
	
	from javadoc.destinationDir
	
	manifest { from sharedManifest }
}

//reobf {
//    clientJar {
//        classpath = sourceSets.main.compileClasspath
//    }
//}

/************************************************************
 * Others
 */

// Add default artifacts for task "build"
artifacts {
	//archives deobfJar
	archives clientJar
}
