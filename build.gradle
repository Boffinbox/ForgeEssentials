// Build repositories
buildscript {
	repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/releases/"
		}
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven/"
        }
		mavenCentral()
		mavenLocal()
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		jcenter()

	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:5.+"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
		classpath "org.ajoberstar:gradle-git:0.12.0"
        //classpath 'org.spongepowered:mixingradle:0.7.+' 
		classpath "com.discord4j:discord4j-core:3.2.1"
	}
}

plugins {
    id 'org.sonarqube' version '2.5'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
// MixinGradle:
//apply plugin: 'org.spongepowered.mixin'
apply plugin: 'jacoco'

sonarqube {
    properties {
        properties['sonar.projectKey'] = "com.forgeessentials:forgeessentials"
        properties['sonar.projectName'] = project.mod_name
        properties['sonar.projectVersion'] = project.mod_version
    }
}

//Clear repositories since spongepowered plugin is inserting an extra repo with http!
repositories.clear()
// Set up FE required repositories
repositories {
    flatDir {
        dirs 'lib'
    }

	maven {
		name "Sonatype (Cubic Chunks)"
		url "https://oss.sonatype.org/content/repositories/public/"
	}

	maven {
		name = "sponge"
		url = "https://repo.spongepowered.org/maven/"
	}

	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven/"
	}

    maven {
        name 'JEI'
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup 'mezz.jei'
        }
		allowInsecureProtocol = true
    }
	maven {
		name = "sk89q"
		url = "https://maven.enginehub.org/repo/"
	}

    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
}


import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.filters.ReplaceTokens

/************************************************************
 * General configuration
 */

// Get buildNumber from environment variable
ext.buildNumber = "0"
if (System.getenv("BUILD_NUMBER") != null) {
	buildNumber = System.getenv("BUILD_NUMBER")

}

// Get commit hash

def repo = Grgit.open(project.file("."))
ext.gitCommitHash = repo.log().find().abbreviatedId

// Set build properties
version = "$mod_version.$buildNumber"
group = "com.forgeessentials"
archivesBaseName = "forgeessentials"
sourceCompatibility = 1.8
targetCompatibility = 1.8
//java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Set up forge options
minecraft {
	mappings channel: 'official', version: '1.16.5'
    accessTransformer = file('src/main/resources/META-INF/forgeessentials_at.cfg')
    runs {
        server {
            workingDirectory project.file('rundir')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
            }
        }
    }
}

// Configure shared manifest
ext.sharedManifest = manifest {
	attributes (
		"BuildID": gitCommitHash,
		"BuildNumber": buildNumber,
		"FMLCorePluginContainsFMLMod": "true",
		"ForceLoadAsMod": "true",
        "Specification-Title": "forgeessentials",
        "Specification-Vendor": "forgeessentials",
        "Specification-Version": "1", // We are version 1 of ourselves
        "Implementation-Title": project.name,
        "Implementation-Version": "$mod_version",
        "Implementation-Vendor" :"forgeessentials",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	)
}

ext.serverManifest = manifest {
	from sharedManifest
	attributes (
		//"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
		//"MixinConfigs": "mixins.forgeessentials.json",
		"FMLAT": "forgeessentials_at.cfg",
	)
}

/************************************************************
 * Dependency configuration
 */

// Create dependency configurations
configurations {
	shade
	serverLib
	buildDep
	shadowLib
	compile.extendsFrom buildDep, shade, serverLib, shadowLib
    mavenDeps
}

// def jdkHome = System.getenv("JAVA_HOME")

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {

    minecraft "net.minecraftforge:forge:$project.minecraftVersion-$project.forgeVersion"
	 // IRC
	compile "org.pircbotx:pircbotx:2.1"
	shadowLib("org.pircbotx:pircbotx:2.1") {
        // these are all packaged with the minecraft server jar
        exclude module: 'guava'
        exclude module: 'commons-lang3'
        exclude module: 'commons-codec'
    }

	// Database libraries
	shadowLib group: 'com.h2database', 	name: 'h2', 					version: '1.3.175'
	shadowLib group: 'mysql', 			name: 'mysql-connector-java', 	version: '5.1.22'
	shadowLib group: 'org.hibernate', 	name: 'hibernate-core', 		version: '5.2.2.Final'
	buildDep  group: 'org.hibernate', 	name: 'hibernate-jpamodelgen', 	version: '5.2.2.Final'
    annotationProcessor group: 'org.hibernate', 	name: 'hibernate-jpamodelgen', 	version: '5.6.14.Final'
    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	/* serverLib "org.eclipse.persistence:eclipselink:2.6.0" */
	
	// WorldEdit
    compile "com.sk89q.worldedit:worldedit-core:7.2.0-SNAPSHOT"
    compile ("com.sk89q.worldedit:worldedit-forge-mc1.16.3:7.2.5") {
		exclude group: "net.minecraftforge", module: "forge"
	}
    compile "baubles:baubles:1.8.7.1:1.16.5"
    //deobfProvided files('lib/worldedit-forge-mc1.10.2-6.1.4-dist.jar')
    mavenDeps "com.sk89q.worldedit:worldedit-core:7.2.0-SNAPSHOT"

	// Shade Mixin library
	//shade (group: "org.spongepowered", name: "mixin", version: "0.8.5-SNAPSHOT", changing: true) {
    //    exclude group: 'org.ow2.asm', module: 'asm-tree'
    //    exclude module: 'launchwrapper'
    //    exclude module: 'guava'
    //    exclude module: 'gson'
    //    exclude module: 'commons-io'
    //    exclude module: 'log4j-core'
        
	//buildDep "org.spongepowered:spongeforge:3.1.0-BETA-1046:deobf"
	compileOnly 'org.spongepowered:spongeapi:8.0.0'
	implementation 'net.kyori:adventure-api:4.11.0'
    compileOnly ("io.github.opencubicchunks:cubicchunks-api:1.12.2-0.0-SNAPSHOT") {
        exclude group: "org.spongepowered", module: "mixin"
    }
    //compileOnly "com.feed_the_beast.mods:FTBLib:5.4.7.2"
    //compileOnly "com.feed_the_beast.mods:FTBUtilities:5.4.1.131"

	// TOOLS.jar from jdk for javadoc support
    // compile files("$jdkHome/lib/tools.jar")
    compile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
    compile 'org.apache.commons:commons-text:1.10.0'	
	compile 'javax.xml.bind:jaxb-api:2.3.1'
}

/************************************************************
 * Configure source sets (e.g., src/main)
 */

sourceSets {
    def deps = [
		configurations.minecraft,
        configurations.compileClasspath,
        configurations.runtimeClasspath
	]
	utils {
		compileClasspath = files(configurations.compile)
		compileClasspath += files deps
	}
	main {
		compileClasspath = files(configurations.compile, sourceSets.utils.output)
		compileClasspath += files deps
        //refMap = "mixins.forgeessentials.refmap.json"
	}
}
/*
project.compileUtilsJava {
    doFirst {
        copy {
            from ('src/utils/replaceJava') {
                filter(ReplaceTokens, tokens: ['_MCVERSION_':project.minecraftVersion, '_BASEVERSION_': project.mod_version])
            }
            into 'src/utils/java'
        }
    }
}*/
// Configure server resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
		expand (
			'version': "$mod_version",
			'mod_name': mod_name,
			'mod_download': mod_download,
			'buildHash': gitCommitHash,
			'buildNumber': buildNumber,
		)
	}
}

//mixin {
//    add sourceSets.main, "mixins.forgeessentials.refmap.json"
//}

/************************************************************
 * Configure server jar (default)
 */

 // JavaExec task for generating tsd
//  Calls the main class for the TSD generator since that is working
/*
task tsd(type: JavaExec) {
    dependsOn "classes"
    classpath = project.sourceSets.test.compileClasspath
    mainClass = "com.forgeessentials.jscripting.TsdGenerator"
    doLast {
        copy {
            from files("jscripting/") {
                include "*.d.ts"
            }
			duplicatesStrategy = DuplicatesStrategy.INCLUDE
            into "build/resources/main/com/forgeessentials/jscripting"
        }
    }
}*/

// Pack libraries as zip file to include them in the jar file
//task serverLibArchive(type: Zip) {
//	archiveName = "libraries.zip"
//	destinationDir = jar.destinationDir
//
//	from (configurations.serverLib.copyRecursive()) { into("ForgeEssentials/lib") }
//}

jar.doLast {
	///delete (serverLibArchive.archivePath)
	delete (shadowJar.archivePath)
}

shadowJar {
	relocate  'org.jboss','com.forgeessentials.thirdparty.org.jboss'
	relocate  'org.hibernate','com.forgeessentials.thirdparty.org.hibernate'
	relocate  'org.h2','com.forgeessentials.thirdparty.org.h2'
	relocate  'org.gjt','com.forgeessentials.thirdparty.org.gjt'
	relocate  'org.dom4j','com.forgeessentials.thirdparty.org.dom4j'
	relocate  'org.pircbotx','com.forgeessentials.thirdparty.org.pircbotx'
	relocate  'org.slf4j','com.forgeessentials.thirdparty.org.slf4j'
	relocate  'javax.persistence','com.forgeessentials.thirdparty.javax.persistence'
	relocate  'javax.transaction','com.forgeessentials.thirdparty.javax.transaction'
	relocate  'javax.interceptor','com.forgeessentials.thirdparty.javax.interceptor'
	relocate  'javax.inject','com.forgeessentials.thirdparty.javax.inject'
	relocate  'javax.enterprise','com.forgeessentials.thirdparty.javax.enterprise'
	relocate  'javax.el','com.forgeessentials.thirdparty.javax.el'
	relocate  'javax.decorator','com.forgeessentials.thirdparty.javax.decorator'
	relocate  'javax.annotation','com.forgeessentials.thirdparty.javax.annotation'
	relocate  'javassist','com.forgeessentials.thirdparty.javassist'
	relocate  'antlr','com.forgeessentials.thirdparty.antlr'
	relocate  'com.fasterxml','com.forgeessentials.thirdparty.com.fasterxml'
	relocate  'com.mysql','com.forgeessentials.thirdparty.com.mysql'
	configurations = [project.configurations.shadowLib]
	classifier = "shadow"

	from sourceSets.main.output
	//exclude('com/forgeessentials/client/**')
	from sourceSets.utils.output
}
// Configure server jar (default)
jar {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	//dependsOn "serverLibArchive"
	dependsOn shadowJar
    //dependsOn "tsd"
	classifier = "server"
	appendix = project.minecraftVersion
	
	from sourceSets.main.output
    //exclude('com/forgeessentials/client/**')
	from sourceSets.utils.output
    //from fileTree(serverLibArchive.archivePath)
	configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
		from (zipTree(artifact))

        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.MF'
        exclude 'LICENSE.txt'
	}
	from (zipTree(shadowJar.archivePath)) {
		exclude 'META-INF','META-INF/**'
	}

	from (zipTree(shadowJar.archivePath)) {
		include 'META-INF/services/*'
		filter {
			line -> line.replaceAll('org.hibernate','com.forgeessentials.thirdparty.org.hibernate')
		}
		filter {
			line -> line.replaceAll('org.pircbotx','com.forgeessentials.thirdparty.org.pircbotx')
		}
		rename {
			name -> "com.forgeessentials.thirdparty.$name"
		}
	}
	
	manifest {
		from serverManifest
	}
}

/************************************************************
 * Deobfuscated server jar
 * Dependency name for maven = com.forgeessentials:forgeessentials:<version>:
 * */

task deobfJar(dependsOn: "classes", type: Jar) {
	classifier = "dev-"+gitCommitHash
	appendix = project.minecraftVersion
	
	from sourceSets.main.output
	from sourceSets.utils.output
	
	from (sourceSets.main.java) {
		into ("src/")
	}

	manifest {
		from serverManifest
	}
}
//
//task sourceJar(type: Jar) {
//	classifier = "sources"
//	appendix = project.minecraftVersion
//
//	from sourceSets.main.allSource
//
//	manifest {
//		from serverManifest
//	}
//}


/************************************************************
 * Configure API javadoc
 */
/*
javadoc {
	include "com/forgeessentials/api/**"
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output
	options.addBooleanOption("Xdoclint:reference,accessibility,html", true) // excluded: syntax, missing
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	appendix = project.minecraftVersion
	
	from javadoc.destinationDir
	
	manifest { from sharedManifest }
}*/

//reobf {
//    clientJar { classpath.from(sourceSets.main.compileClasspath) }
//}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
/************************************************************
 * Configure Annotations for IDEs Jar
 */

// util.jar
task Annotations(type: Jar) {
	classifier = "annonations"
	appendix = project.minecraftVersion
	
    from(sourceSets.main.output) {
        include "com/forgeessentials/playerlogger/entity/**"
        exclude "com/forgeessentials/playerlogger/entity/Action.class"
        exclude "com/forgeessentials/playerlogger/entity/Action01Block\$ActionBlockType.class"
        exclude "com/forgeessentials/playerlogger/entity/Action01Block.class"
        exclude "com/forgeessentials/playerlogger/entity/Action02Command.class"
        exclude "com/forgeessentials/playerlogger/entity/Action03PlayerEvent\$PlayerEventType.class"
        exclude "com/forgeessentials/playerlogger/entity/Action03PlayerEvent.class"
        exclude "com/forgeessentials/playerlogger/entity/Action04PlayerPosition.class"
        exclude "com/forgeessentials/playerlogger/entity/BlockData.class"
        exclude "com/forgeessentials/playerlogger/entity/PlayerData.class"
        exclude "com/forgeessentials/playerlogger/entity/WorldData.class"
        
        doLast {
        delete fileTree(dir:'misc', include: '**annotations.jar')
        copy {
            from files("build/libs/") {
                include "**annotations.jar"
            }
            into "misc"
            rename 'forgeessentials-'+project.minecraftVersion+"-"+project.version+'-annotations.jar', 'forgeessentials-'+project.minecraftVersion+'-annotations.jar'
        }
        delete fileTree(dir:'build/libs/', include: '**annotations.jar')
        }
    }  
}

/************************************************************
 * Others
 */

 // Add default artifacts for task "build"
artifacts {
	archives deobfJar
	archives Annotations
}
